// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SteamMarketplace.Model.Database;

#nullable disable

namespace SteamMarketplace.Model.Database.Migrations
{
    [DbContext(typeof(SteamMarketplaceDbContext))]
    partial class SteamMarketplaceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("21f7b496-c675-4e8a-a34c-fc5ec0762fdb"),
                            RoleId = new Guid("b867520a-92db-4658-be39-84da53a601c0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SteamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("WalletBalance")
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21f7b496-c675-4e8a-a34c-fc5ec0762fdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a3cd1a1-35bc-4a8a-b264-2c8515deb22d",
                            CurrencyId = new Guid("cf7b0c49-42a1-483d-97f8-b88711f8546c"),
                            Email = "andrey.levchenko.2001@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREY.LEVCHENKO.2001@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEN6twfBdn77O7bBeVNdQit8RSgpyKCWhMuHwOzsjOURovljjEV5eUD/lbLsBnThMXQ==",
                            PhoneNumberConfirmed = false,
                            RegisteredAt = new DateTime(2022, 4, 30, 19, 0, 0, 0, DateTimeKind.Utc),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            WalletBalance = 1000000m
                        });
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ApplicatonRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b867520a-92db-4658-be39-84da53a601c0"),
                            ConcurrencyStamp = "c18c743d-6cda-4936-bef9-150444e44c6d",
                            Name = "Администратор",
                            NormalizedName = "АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = new Guid("21e8cc7e-8df5-4113-b9f9-20498b651581"),
                            ConcurrencyStamp = "a8c000d2-b512-4769-bcb4-4bd327e03caf",
                            Name = "Игрок",
                            NormalizedName = "Игрок"
                        });
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CultureInfoName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Literal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de91537-d302-4dd7-8803-b2bf6c973d26"),
                            CultureInfoName = "us-US",
                            Literal = "USD"
                        },
                        new
                        {
                            Id = new Guid("cf7b0c49-42a1-483d-97f8-b88711f8546c"),
                            CultureInfoName = "ru-RU",
                            Literal = "RUB"
                        },
                        new
                        {
                            Id = new Guid("2b1ba08d-97ea-427d-b356-d3ad65e09905"),
                            CultureInfoName = "uk-UA",
                            Literal = "UAH"
                        },
                        new
                        {
                            Id = new Guid("b8b74ee6-d9a5-4dde-b7b6-21e4a04a6f7d"),
                            CultureInfoName = "kk-KZ",
                            Literal = "KZT"
                        },
                        new
                        {
                            Id = new Guid("f340e01a-72e6-40c5-94bc-b7d407f54bd0"),
                            CultureInfoName = "zh-CN",
                            Literal = "CNY"
                        },
                        new
                        {
                            Id = new Guid("a58d5766-4fbd-4f59-9dea-2d1baceda710"),
                            CultureInfoName = "eu-EU",
                            Literal = "EUR"
                        },
                        new
                        {
                            Id = new Guid("72616e1e-e63f-4262-863c-72140c5ef912"),
                            CultureInfoName = "en-GB",
                            Literal = "GBP"
                        },
                        new
                        {
                            Id = new Guid("eccbb5a2-0fe6-4c9f-930a-313ee8f2d2bb"),
                            CultureInfoName = "au-AU",
                            Literal = "AUD"
                        },
                        new
                        {
                            Id = new Guid("d8bdac45-92c3-4183-85ee-90b335d9f500"),
                            CultureInfoName = "az-AZ",
                            Literal = "AZN"
                        },
                        new
                        {
                            Id = new Guid("c76d4f7e-4f1d-47d8-a339-89f0ac7e7096"),
                            CultureInfoName = "am-AM",
                            Literal = "AMD"
                        },
                        new
                        {
                            Id = new Guid("4f4ced7b-0623-4bf3-8fa2-4297f9779024"),
                            CultureInfoName = "by-BY",
                            Literal = "BYN"
                        },
                        new
                        {
                            Id = new Guid("68ae2ebb-b92b-46b7-9032-3cb80a22842c"),
                            CultureInfoName = "bg-BG",
                            Literal = "BGN"
                        },
                        new
                        {
                            Id = new Guid("6c75d227-bd1f-42c5-9fdc-17def5240e4a"),
                            CultureInfoName = "br-BR",
                            Literal = "BRL"
                        },
                        new
                        {
                            Id = new Guid("e272ff65-2a3f-448d-b0a2-553b22bc8ff1"),
                            CultureInfoName = "hu-HU",
                            Literal = "HUF"
                        },
                        new
                        {
                            Id = new Guid("3b157395-d7d3-46e1-bfc9-365a9a44d153"),
                            CultureInfoName = "hk-HK",
                            Literal = "HKD"
                        },
                        new
                        {
                            Id = new Guid("3f54754b-e73c-48d7-a746-abff0e31d5eb"),
                            CultureInfoName = "dk-DK",
                            Literal = "DKK"
                        },
                        new
                        {
                            Id = new Guid("71df1ba6-67a8-4e9e-9947-9136aa3f1079"),
                            CultureInfoName = "in-IN",
                            Literal = "INR"
                        },
                        new
                        {
                            Id = new Guid("0c6d22bc-cee2-47f8-8d29-444fd726e3e4"),
                            CultureInfoName = "ca-CA",
                            Literal = "CAD"
                        },
                        new
                        {
                            Id = new Guid("d8b6a3e8-69e1-4905-aea1-808e4b25dd29"),
                            CultureInfoName = "kg-KG",
                            Literal = "KGS"
                        },
                        new
                        {
                            Id = new Guid("6e0379a4-ea9c-423d-9590-0bdcc0bac7dd"),
                            CultureInfoName = "md-MD",
                            Literal = "MDL"
                        },
                        new
                        {
                            Id = new Guid("ac20be74-4c1a-4eaf-9196-df50879b7a44"),
                            CultureInfoName = "no-NO",
                            Literal = "NOK"
                        },
                        new
                        {
                            Id = new Guid("d64b4b93-77dd-4b39-a82f-9c012fd61924"),
                            CultureInfoName = "pl-PL",
                            Literal = "PLN"
                        },
                        new
                        {
                            Id = new Guid("b4e37cf0-9bf7-471e-a68f-e6f0e4c4c98f"),
                            CultureInfoName = "ro-RO",
                            Literal = "RON"
                        },
                        new
                        {
                            Id = new Guid("fecbdeae-ead2-42e2-b19e-5ad2599fa6f4"),
                            CultureInfoName = "???",
                            Literal = "XDR"
                        },
                        new
                        {
                            Id = new Guid("6e1c5e6e-925f-421b-8c3f-8f4551e1ad35"),
                            CultureInfoName = "sg-SG",
                            Literal = "SGD"
                        },
                        new
                        {
                            Id = new Guid("84376203-fb2f-4871-b2fc-c462faf6cc78"),
                            CultureInfoName = "tj-TJ",
                            Literal = "TJS"
                        },
                        new
                        {
                            Id = new Guid("e1db9424-cf1d-442b-a236-46f461bace48"),
                            CultureInfoName = "tr-TR",
                            Literal = "TRY"
                        },
                        new
                        {
                            Id = new Guid("8efca627-8746-49ce-9689-f0c195661ccd"),
                            CultureInfoName = "tm-TM",
                            Literal = "TMT"
                        },
                        new
                        {
                            Id = new Guid("314a66a0-ef8d-4529-8dd7-04342fe0c7cf"),
                            CultureInfoName = "uz-UZ",
                            Literal = "UZS"
                        },
                        new
                        {
                            Id = new Guid("85e94c52-6b83-4ed0-8ae9-3975daa38af0"),
                            CultureInfoName = "cz-CZ",
                            Literal = "CZK"
                        },
                        new
                        {
                            Id = new Guid("3bc13b81-2ac1-4149-9ee0-769d1f420bf8"),
                            CultureInfoName = "se-SE",
                            Literal = "SEK"
                        },
                        new
                        {
                            Id = new Guid("6f1063d5-a35d-41e7-af1b-95e1db2fdca1"),
                            CultureInfoName = "ch-CH",
                            Literal = "CHF"
                        },
                        new
                        {
                            Id = new Guid("8c46157c-adae-46e1-afac-b65ff275f60d"),
                            CultureInfoName = "za-ZA",
                            Literal = "ZAR"
                        },
                        new
                        {
                            Id = new Guid("7e6fdb58-2b26-4cf8-b89f-fdc3972ce9dc"),
                            CultureInfoName = "kr-KR",
                            Literal = "KRW"
                        },
                        new
                        {
                            Id = new Guid("c2d2eeab-7ab9-4d56-969a-192d9ae9538c"),
                            CultureInfoName = "jp-JP",
                            Literal = "JPY"
                        });
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<long>("CSMoneyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<float?>("Float")
                        .HasColumnType("float(15)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("QualityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("QualityId");

                    b.HasIndex("RarityId");

                    b.HasIndex("TypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Image3d")
                        .HasColumnType("text");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Screenshot")
                        .HasColumnType("text");

                    b.Property<string>("SteamImg")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ItemNested", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemNestedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemNestedId");

                    b.ToTable("ItemNesteds");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CSMoneyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("PriceUsd")
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime>("PurchaseAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Qualities");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Rarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rarities");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExposedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("PriceUsd")
                        .HasColumnType("numeric(18,6)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SoldAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SellerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HappenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PurchaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("756cd385-85a6-4eb8-a2d8-e9dfddbc98ef"),
                            HappenedAt = new DateTime(2022, 4, 30, 19, 5, 0, 0, DateTimeKind.Utc),
                            TypeId = new Guid("0fdd5521-90fe-4709-9cce-d4a7d4ffb2e1"),
                            UserId = new Guid("21f7b496-c675-4e8a-a34c-fc5ec0762fdb"),
                            Value = 1000000m
                        });
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fdd5521-90fe-4709-9cce-d4a7d4ffb2e1"),
                            Name = "Adding funds to your account",
                            RuName = "Пополнение"
                        },
                        new
                        {
                            Id = new Guid("2edbc026-1aaa-4f61-9f71-e3ab94fa6252"),
                            Name = "Withdrawal of funds",
                            RuName = "Вывод средств"
                        },
                        new
                        {
                            Id = new Guid("e98b7e58-8f0e-4662-b5a7-5358e8107ef8"),
                            Name = "Purchase",
                            RuName = "Покупка"
                        },
                        new
                        {
                            Id = new Guid("1f70a7dc-9dee-4e44-946d-4b82783bf77b"),
                            Name = "Sale",
                            RuName = "Продажа"
                        });
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.UserInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInventories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicatonRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicatonRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ApplicationUser", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Currency", "Currency")
                        .WithMany("Users")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ExchangeRate", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Currency", "Currency")
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Item", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Application", "Application")
                        .WithMany("Items")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.Collection", "Collection")
                        .WithMany("Items")
                        .HasForeignKey("CollectionId");

                    b.HasOne("SteamMarketplace.Model.Database.Entities.Quality", "Quality")
                        .WithMany("Items")
                        .HasForeignKey("QualityId");

                    b.HasOne("SteamMarketplace.Model.Database.Entities.Rarity", "Rarity")
                        .WithMany("Items")
                        .HasForeignKey("RarityId");

                    b.HasOne("SteamMarketplace.Model.Database.Entities.ItemType", "Type")
                        .WithMany("Items")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Collection");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ItemImage", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Item", "Item")
                        .WithOne("Image")
                        .HasForeignKey("SteamMarketplace.Model.Database.Entities.ItemImage", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ItemNested", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Item", "Item")
                        .WithMany("Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.Item", "Nested")
                        .WithMany("ItemNesteds")
                        .HasForeignKey("ItemNestedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Nested");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Purchase", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.Sale", "Sale")
                        .WithOne("Purchase")
                        .HasForeignKey("SteamMarketplace.Model.Database.Entities.Purchase", "SaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Sale", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Item", "Item")
                        .WithMany("Sales")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", "Seller")
                        .WithMany("Sales")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Transaction", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Purchase", "Purchase")
                        .WithMany("Transactions")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("SteamMarketplace.Model.Database.Entities.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.UserInventory", b =>
                {
                    b.HasOne("SteamMarketplace.Model.Database.Entities.Item", "Item")
                        .WithMany("UserInventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMarketplace.Model.Database.Entities.ApplicationUser", "User")
                        .WithMany("Inventory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Application", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Collection", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Currency", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Item", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("ItemNesteds");

                    b.Navigation("Items");

                    b.Navigation("Sales");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.ItemType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Purchase", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Quality", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Rarity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.Sale", b =>
                {
                    b.Navigation("Purchase")
                        .IsRequired();
                });

            modelBuilder.Entity("SteamMarketplace.Model.Database.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
